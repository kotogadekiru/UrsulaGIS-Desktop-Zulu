<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.ursulagis</groupId>
    <artifactId>UrsulaGIS-Desktop_Zulu</artifactId>
    <version>1.0.0</version>

    <!-- This description text is included in the Windows installer by default, see windows-jpackage.txt -->
    <!-- es el nombre con el que aparece en task manager-->
    <description>UrsulaGIS-Desktop_Zulu</description>

    <properties>
        <!-- Set this to the class with the main method for your application -->
        <main-class>com.ursulagis.desktop.gui.JFXMain</main-class>
        <!-- Set this to the preloader class for your application -->
        <preloader-class>com.ursulagis.desktop.gui.UrsulaGISPreloader</preloader-class>
        <!--main-class>com.changenode.BaseApplication</main-class-->
        <!-- Change your app's name to something interesting... but you might want to avoid spaces
        just to safe for compatibility across operating systems. -->
        <app.name>UrsulaGIS-Desktop_Zulu</app.name>
        <!-- This converts the build timestamp to a Windows-installer friendly version number (minute level resolution).
        Note that Maven generated timestamp is in UTC, not local time. For more information see:
         https://docs.microsoft.com/en-us/windows/win32/msi/productversion
         https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/text/SimpleDateFormat.html
         -->

        <!-- cambiar el yml APP_VERSION si se cambia la version mayor-->
        <app.version.mayor>1.0.</app.version.mayor>
        <app.version>${app.version.mayor}1</app.version>
        <app.version.local>${app.version.mayor}1</app.version.local>
        <app.icon>U_nueva_3_256x256_verde.ico</app.icon>

        <!-- This property is used to specify the modules included in the (custom) JVM image. -->
        <!-- JavaFX modules are now part of the JDK and don't need to be explicitly included -->
        <jvm.modules>ALL-MODULE-PATH
        <!-- javafx.base,javafx.controls,javafx.fxml,javafx.graphics,javafx.swing,javafx.media,javafx.web,java.logging,java.desktop,java.base,java.xml,java.sql,java.naming,java.management,java.instrument,java.security.jgss,java.security.sasl,java.rmi,java.transaction.xa,java.prefs,jdk.unsupported,jdk.unsupported.desktop,     java.net.http,
            java.security.sasl -->
        </jvm.modules>

        <!-- Set the project to UTF-8, avoiding warnings in the build logs -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>

        <!-- Replace this UUID with a custom one for your project. This ID is used by the Windows installer system
        to know that an installer is intended to replace/upgrade an earlier version. The easiest thing to do is
        grab a unique UUID via https://www.uuidgenerator.net -->
        <windows.upgrade.uuid>5d0f916c-2119-4996-9503-4da27d3609b9</windows.upgrade.uuid>
        <!-- This is used to set many user-visible fields in the Windows Installer. See windows-jpackage.txt -->
        <windows.vendor>'URSULA CORP S.A.'</windows.vendor>

        <!-- Empty properties to skip signing by default. Set with the macos-sign Maven profile -->
        <macos.sign></macos.sign>
        <macos.sign.identity></macos.sign.identity>

		<geotools.version>33.2</geotools.version>
        <worldwind.version>2.4.0</worldwind.version>
        <lombok-version>1.18.38</lombok-version>
        <jts.version>1.19.0</jts.version>

    </properties>

    <dependencies>
         <dependency>
            <groupId>com.dooapp.fxform2</groupId>
            <artifactId>core</artifactId>
            <version>11.0.0</version> <!-- Or use a version for Java 8 like 8.2.11 -->
        </dependency>     
        <!-- https://mvnrepository.com/artifact/org.controlsfx/controlsfx -->
        <dependency>
            <groupId>org.controlsfx</groupId>
            <artifactId>controlsfx</artifactId>
            <version>11.2.2</version>
        </dependency>
        
        <!-- https://mvnrepository.com/artifact/mil.nga/tiff -->
        <dependency>
            <groupId>mil.nga</groupId>
            <artifactId>tiff</artifactId>
            <version>3.0.0</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.google.cloud/google-cloud-translate -->
        <dependency>
            <groupId>com.google.cloud</groupId>
            <artifactId>google-cloud-translate</artifactId>
            <version>2.73.0</version>
        </dependency>
        <dependency>
			<groupId>com.google.http-client</groupId>
			<artifactId>google-http-client-jackson</artifactId>
			<version>1.15.0-rc</version>
		</dependency>
        <!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.8.4</version>
		</dependency>

        
        <!-- https://mvnrepository.com/artifact/org.apache.pdfbox/pdfbox -->
        <dependency>
            <groupId>org.apache.pdfbox</groupId>
            <artifactId>pdfbox</artifactId>
            <version>3.0.5</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.google.zxing/core -->
        <dependency>
            <groupId>com.google.zxing</groupId>
            <artifactId>core</artifactId>
            <version>3.5.3</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.google.zxing/javase -->
        <dependency>
            <groupId>com.google.zxing</groupId>
            <artifactId>javase</artifactId>
            <version>3.5.3</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.apache.poi/poi -->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
            <version>3.11</version>
        </dependency>
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>3.11</version>
        </dependency>
        <dependency>
            <groupId>javax.persistence</groupId>
            <artifactId>javax.persistence-api</artifactId>
            <version>2.2</version> <!-- Use the appropriate version for your project -->
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.eclipse.persistence/org.eclipse.persistence.jpars -->
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>org.eclipse.persistence.jpars</artifactId>
            <version>2.7.16</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.h2database/h2 -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>1.4.197</version>           
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.eclipse.persistence/org.eclipse.persistence.jpa -->
        <dependency>
            <groupId>org.eclipse.persistence</groupId>
            <artifactId>org.eclipse.persistence.jpa</artifactId>
            <version>2.7.16</version>
        </dependency>    
        <dependency>
            <groupId>org.geotools</groupId>
            <artifactId>gt-shapefile</artifactId>
            <version>${geotools.version}</version>
        </dependency>
        <dependency>
            <groupId>org.geotools</groupId>
            <artifactId>gt-coverage</artifactId>
            <version>${geotools.version}</version>
        </dependency>
        <dependency>
            <groupId>org.geotools</groupId>
            <artifactId>gt-referencing</artifactId>
            <version>${geotools.version}</version>
        </dependency>
        <dependency>
            <groupId>org.geotools</groupId>
            <artifactId>gt-epsg-hsql</artifactId>
            <version>${geotools.version}</version>
        </dependency>
        <dependency>
            <groupId>org.locationtech.jts</groupId>
            <artifactId>jts-core</artifactId>
            <version>${jts.version}</version>
        </dependency>    

        <!-- Additional common dependencies for WorldWind projects -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <version>2.17.0</version>
        </dependency>
        
 
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok-version}</version> <!-- Use the latest stable version -->
            <scope>provided</scope>
        </dependency>


        <!-- This dependency is a normal Maven dependency, here mainly as an example. It brings in other transitive
         dependencies as well. You can remove it from your project (unless you happen to need to generate test data.  -->
        <dependency>
            <groupId>com.github.javafaker</groupId>
            <artifactId>javafaker</artifactId>
            <version>1.0.2</version>
        </dependency>

        <!-- Modern JavaFX Look and Feel -->
        <!-- https://github.com/mkpaz/atlantafx -->
        <!-- Temporarily commented out due to Java 11 compatibility issues -->
        <!-- <dependency>
            <groupId>io.github.mkpaz</groupId>
            <artifactId>atlantafx-base</artifactId>
            <version>1.0.0</version>
        </dependency> -->
        
        <!-- Apache Commons Lang3 for Java 17 compatibility -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.12.0</version>
        </dependency>
        
        
        <!-- Local JAR dependencies from libs directory -->
        <dependency>
            <groupId>gov.nasa.worldwind</groupId>
            <artifactId>worldwind</artifactId>
            <version>${worldwind.version}</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/libs/worldwind-${worldwind.version}.jar</systemPath>
        </dependency>
        
        <dependency>
            <groupId>gov.nasa.worldwind</groupId>
            <artifactId>worldwindx</artifactId>
            <version>${worldwind.version}</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/libs/worldwindx-${worldwind.version}.jar</systemPath>
        </dependency>
        
        <dependency>
            <groupId>org.jogamp.gluegen</groupId>
            <artifactId>gluegen-rt</artifactId>
            <version>${worldwind.version}</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/libs/gluegen-rt.jar</systemPath>
        </dependency>
        
        <dependency>
            <groupId>org.jogamp.gluegen</groupId>
            <artifactId>gluegen-rt-natives-linux-amd64</artifactId>
            <version>${worldwind.version}</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/libs/gluegen-rt-natives-linux-amd64.jar</systemPath>
        </dependency>
        
        <dependency>
            <groupId>org.jogamp.gluegen</groupId>
            <artifactId>gluegen-rt-natives-macosx-universal</artifactId>
            <version>${worldwind.version}</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/libs/gluegen-rt-natives-macosx-universal.jar</systemPath>
        </dependency>
        
        <dependency>
            <groupId>org.jogamp.gluegen</groupId>
            <artifactId>gluegen-rt-natives-windows-amd64</artifactId>
            <version>${worldwind.version}</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/libs/gluegen-rt-natives-windows-amd64.jar</systemPath>
        </dependency>
        
        <dependency>
            <groupId>org.jogamp.jogl</groupId>
            <artifactId>jogl-all</artifactId>
            <version>${worldwind.version}</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/libs/jogl-all.jar</systemPath>
        </dependency>
        
        <dependency>
            <groupId>org.jogamp.jogl</groupId>
            <artifactId>jogl-all-natives-linux-amd64</artifactId>
            <version>${worldwind.version}</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/libs/jogl-all-natives-linux-amd64.jar</systemPath>
        </dependency>
        
        <dependency>
            <groupId>org.jogamp.jogl</groupId>
            <artifactId>jogl-all-natives-macosx-universal</artifactId>
            <version>${worldwind.version}</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/libs/jogl-all-natives-macosx-universal.jar</systemPath>
        </dependency>
        
        <dependency>
            <groupId>org.jogamp.jogl</groupId>
            <artifactId>jogl-all-natives-windows-amd64</artifactId>
            <version>${worldwind.version}</version>
            <scope>system</scope>
            <systemPath>${project.basedir}/libs/jogl-all-natives-windows-amd64.jar</systemPath>
        </dependency>
        
    </dependencies>

	<repositories>
  	    <repository>
			<id>maven2-repository.dev.java.net</id>
			<name>Java.net repository</name>
			<url>http://download.java.net/maven/2</url>
		</repository>
		<repository>
			<id>osgeo</id>
			<name>OSGeo Release Repository</name>
			<url>https://repo.osgeo.org/repository/release/</url>
		</repository>
         <repository>
            <id>jogamp-remote</id>
            <name>jogamp test mirror</name>
            <url>https://www.jogamp.org/deployment/maven/</url>
            <layout>default</layout>
          </repository>
          

	</repositories>

    <build>
        <extensions>
            <!-- Used to inject the OS and architecture values in a consistent manner -->
            <!-- https://github.com/trustin/os-maven-plugin -->
            <extension>
                <groupId>kr.motd.maven</groupId>
                <artifactId>os-maven-plugin</artifactId>
                <version>1.7.0</version>
            </extension>
        </extensions>
        <resources>
            <resource>
                <!-- Here we are processing the platform-specific jpackage command files, adding in Maven
                 properties for configuration. -->
                <directory>${project.basedir}/src/packaging</directory>
                <filtering>true</filtering>
                <targetPath>${project.build.directory}/packaging</targetPath>
            </resource>
            <!-- Add the default resource path back in - by overriding above it disables the default -->
            <resource>
                <directory>${project.basedir}/src/main/resources</directory>
                <filtering>false</filtering>
<!--                 <excludes>
                    <exclude>**/*.png</exclude>
                    <exclude>**/*.ico</exclude>
                    <exclude>**/*.mp3</exclude>
                    <exclude>**/*.jpg</exclude>
                    <exclude>**/*.jpeg</exclude>
                    <exclude>**/*.gif</exclude>
                    <exclude>**/*.bmp</exclude>
                    <exclude>**/*.wav</exclude>
                    <exclude>**/*.mp4</exclude>
                    <exclude>**/*.avi</exclude>
                </excludes> -->
            </resource>
            
            <!-- Include resources from Java source directory (XML configs, images, etc.) -->
            <resource>
                <directory>${project.basedir}/src/main/java</directory>
                <filtering>false</filtering>
                <includes>
                    <include>**/*.wav</include>
                    <include>**/*.xml</include>
                    <include>**/*.fxml</include>
                    <include>**/*.png</include>
                    <include>**/*.ico</include>
                    <include>**/*.jpg</include>
                    <include>**/*.jpeg</include>
                    <include>**/*.gif</include>
                    <include>**/*.bmp</include>
                    <include>**/*.properties</include>
                </includes>
            </resource>
            
            <!-- Add binary resources without filtering -->
<!--             <resource>
                <directory>${project.basedir}/src/main/resources</directory>
                <filtering>false</filtering>
                <includes>
                    <include>**/*.png</include>
                    <include>**/*.ico</include>
                    <include>**/*.mp3</include>
                    <include>**/*.jpg</include>
                    <include>**/*.jpeg</include>
                    <include>**/*.gif</include>
                    <include>**/*.bmp</include>
                    <include>**/*.wav</include>
                    <include>**/*.mp4</include>
                    <include>**/*.avi</include>
                </includes>
            </resource> -->

            <resource>
                <directory>${project.basedir}/src/main/resources/build-info/</directory>
                <filtering>true</filtering>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>buildnumber-maven-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <phase>validate</phase>
                        <goals>
                            <goal>create-timestamp</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <timestampFormat>yyyy-MM-dd'T'HH:mm:ss'Z'</timestampFormat>
                    <timestampPropertyName>maven.build.timestamp</timestampPropertyName>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <configuration>
                    <!-- This is an app, so we don't want to install it in the local Maven repository -->
                    <skip>true</skip>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <!-- This copies the jar files declared by the Maven build into a single directory.
                        This makes it easy to assemble the final installer package -->
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <!-- Include only compile stage dependencies (no test dependencies) -->
                            <includeScope>compile</includeScope>
                            <!-- The JavaFX libraries are bundled into the custom JVM, so we don't want to duplicate
                            them in the bundled app and installer. This command skips all of the JavaFX by groupId. -->
                            <excludeGroupIds>org.openjfx</excludeGroupIds>
                            <!-- Copy dependencies to lib subdirectory within dependency folder -->
                            <outputDirectory>${project.build.directory}/dependency/lib</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <!-- This copies the system-scoped dependencies (local JARs from libs directory) -->
                        <id>copy-system-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <includeScope>system</includeScope>
                            <outputDirectory>${project.build.directory}/dependency/lib</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!-- Put the application jar generated by the project into the dependency folder - the default folder
                for the maven-dependency-plugin output. -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <outputDirectory>${project.build.directory}/dependency</outputDirectory>
                    <archive>
                        <manifest>
                            <mainClass>${main-class}</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <!-- Plugin to make working with JavaFX nicer. See https://github.com/openjfx/javafx-maven-plugin -->
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.6</version>
                <configuration>
                    <mainClass>${main-class}</mainClass>
                    <preloaderClass>${preloader-class}</preloaderClass>
                    <options>
                        <option>-Djava.awt.headless=false</option>
                        <option>-Dprism.order=sw</option>
                        <option>-Dprism.verbose=false</option>
                        <option>-Dprism.forceGPU=false</option>
                        <option>-Dorg.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION=17</option>
                        <option>-Djogamp.gluegen.UseTempJarCache=true</option>
                        <option>--add-opens=javafx.controls/javafx.scene.control.skin=ALL-UNNAMED</option>
                        <option>--add-opens=javafx.controls/javafx.scene.control=ALL-UNNAMED</option>
                        <option>--add-opens=javafx.graphics/javafx.scene=ALL-UNNAMED</option>
                        <option>--add-opens=javafx.base/javafx.beans=ALL-UNNAMED</option>
                    </options>
                </configuration>
            </plugin>
            <plugin>
                <!-- https://github.com/wiverson/jtoolprovider-plugin -->
                <groupId>io.github.wiverson</groupId>
                <artifactId>jtoolprovider-plugin</artifactId>
                <version>1.0.34</version>
                <executions>
                    <!-- This command runs jlink, generating a custom JVM by combining the JavaFX modules bundled in
                    this project with the JDK modules. -->
                    <execution>
                        <id>jlink</id>
                        <phase>package</phase>
                        <goals>
                            <goal>java-tool</goal>
                        </goals>
                        <configuration>
                            <toolName>jlink</toolName>
                            <removeDirectories>${project.build.directory}/jvm-image/</removeDirectories>
                            <addModules>${jvm.modules}</addModules>
                            <output>${project.build.directory}/jvm-image</output>
                            <args>
                                <arg>--strip-native-commands</arg>
                                <arg>--no-header-files</arg>
                                <arg>--strip-debug</arg>
                                <arg>--no-man-pages</arg>
                                <!-- compress=2-->                                
                            </args>
                        </configuration>
                    </execution>
                    <!-- The command that actually generates the installer. The options for each platform
                    are found the /src/packaging directory. These files are copied into the target directory by
                    the Maven resources plugin, which does the filtering to replace the original values with
                    the actual Maven properties.

                    https://github.com/wiverson/jtoolprovider-plugin/blob/main/java-tool-doc.md
                    -->
                    <execution>
                        <id>jpackage</id>
                        <phase>install</phase>
                        <goals>
                            <goal>java-tool</goal>
                        </goals>
                        <configuration>
                            <toolName>jpackage</toolName>
                            <writeOutputToLog>true</writeOutputToLog>
                            <writeErrorsToLog>true</writeErrorsToLog>
                            <failOnError>true</failOnError>
                            <removeDirectories>${project.build.directory}/installer-work</removeDirectories>
                            <args>@${project.build.directory}/packaging/${os.detected.name}-jpackage.txt</args>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <mainClass>${main-class}</mainClass>
                    <classpathScope>compile</classpathScope>
                    <options>
                        <option>-Djava.awt.headless=false</option>
                        <option>-Dprism.order=sw</option>
                        <option>-Dprism.verbose=false</option>
                        <option>-Dprism.forceGPU=false</option>
                        <option>-Dorg.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION=17</option>
                        <option>-Djogamp.gluegen.UseTempJarCache=true</option>
                        <option>-Djava.net.useSystemProxies=true</option>
                        <option>--add-opens=javafx.controls/javafx.scene.control.skin=ALL-UNNAMED</option>
                        <option>--add-opens=javafx.controls/javafx.scene.control=ALL-UNNAMED</option>
                        <option>--add-opens=javafx.graphics/javafx.scene=ALL-UNNAMED</option>
                        <option>--add-opens=javafx.base/javafx.beans=ALL-UNNAMED</option>
                    </options>
                    <systemProperties>
                        <systemProperty>
                            <key>javafx.preloader</key>
                            <value>${preloader-class}</value>
                        </systemProperty>
                    </systemProperties>
                </configuration>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>3.2.0</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.10.1</version>
                    <configuration>
                        <source>${maven.compiler.source}</source>
                        <target>${maven.compiler.target}</target>
                        <annotationProcessorPaths>
                            <path>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok</artifactId>
                                <version>${lombok-version}</version>
                            </path>
                        </annotationProcessorPaths>                 
                    </configuration>      
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>3.3.0</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>3.0.0-M1</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.2.2</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-project-info-reports-plugin</artifactId>
                    <version>3.3.0</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.2.0</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>4.0.0-M1</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
    <reporting>
        <plugins>
            <!-- Basic report generation. -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>3.3.0</version>
            </plugin>

            <!-- http://mojo.codehaus.org/versions-maven-plugin/version-rules.html -->
            <!-- This plugin is a utility to find outdated dependencies in your project. Just run mvn site and
            the resulting HTML reports in target/site will let you know what plugins and dependencies are out of date.
             -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>versions-maven-plugin</artifactId>
                <version>2.8.1</version>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>dependency-updates-report</report>
                            <report>plugin-updates-report</report>
                            <report>property-updates-report</report>
                        </reports>
                    </reportSet>
                </reportSets>
                <configuration>
                    <processDependencyManagementTransitive>false</processDependencyManagementTransitive>
                </configuration>
            </plugin>
        </plugins>
    </reporting>
    <profiles>
        <profile>
            <id>GitHub Run</id>
            <activation>
                <property>
                    <name>env.GITHUB_ACTIONS</name>
                </property>
            </activation>
            <properties>
                <!--suppress UnresolvedMavenProperty -->
                <app.version>${app.version.mayor}${env.GITHUB_RUN_NUMBER}</app.version>
            </properties>
        </profile>
        <profile>
            <id>Local Development Run</id>
            <activation>
                <property>
                    <name>!env.GITHUB_ACTIONS</name>
                </property>
            </activation>
            <properties>
                <app.version>${app.version.local}</app.version>
            </properties>
        </profile>


        <!-- We use the built-in Maven profile activation system to set the platform property.
        These properties are then use to build the directory paths to the platform specific resources.
        It would be great if Maven automatically added the os family as a property by default
         -->

        <profile>
            <id>macos-sign</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <macos.sign>--mac-sign</macos.sign>
                <!-- You will have to replace this with your own dev information from your Apple identity -->
                <macos.sign.identity>--mac-signing-key-user-name "Company Name, Inc. (BXPXTXC35S)"</macos.sign.identity>
            </properties>
        </profile>

        <profile>
            <id>windows-active</id>
            <activation>
                <os>
                    <family>windows</family>
                </os>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <!-- This adds a "launch on finish" to the Windows msi installer. This just tweaks the Windows
                         installer package to run the executable after the installer runs, simplifying the user experience.
                          If you don't want this behavior, just delete this plug execution. -->
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>3.0.0</version>
                        <executions>
                            <execution>
                                <phase>install</phase>
                                <id>add-launch-to-msi</id>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <executable>cscript</executable>
                            <outputFile>${project.build.directory}/msi-result.log</outputFile>
                            <workingDirectory>${project.build.directory}</workingDirectory>
                            <arguments>
                                <argument>${project.build.directory}/packaging/add-launch-to-msi.js</argument>
                            </arguments>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        
        <!-- Development run profile -->
        <profile>
            <id>dev-run</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>3.1.0</version>
                        <executions>
                            <execution>
                                <id>dev-run</id>
                                <goals>
                                    <goal>java</goal>
                                </goals>
                                <configuration>
                                    <mainClass>${main-class}</mainClass>
                                    <classpathScope>compile</classpathScope>
                                    <options>
                                        <option>-Djava.awt.headless=false</option>
                                        <option>-Dprism.order=sw</option>
                                        <option>-Dprism.verbose=true</option>
                                        <option>-Dprism.forceGPU=false</option>
                                        <option>-Dorg.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION=17</option>
                                        <option>-Djogamp.gluegen.UseTempJarCache=true</option>
                                        <option>-Djava.net.useSystemProxies=true</option>
                                        <option>-Xmx2g</option>
                                        <option>-XX:+UseG1GC</option>
                                        <option>--add-opens=javafx.controls/javafx.scene.control.skin=ALL-UNNAMED</option>
                                        <option>--add-opens=javafx.controls/javafx.scene.control=ALL-UNNAMED</option>
                                        <option>--add-opens=javafx.graphics/javafx.scene=ALL-UNNAMED</option>
                                        <option>--add-opens=javafx.base/javafx.beans=ALL-UNNAMED</option>
                                    </options>
                                    <systemProperties>
                                        <systemProperty>
                                            <key>javafx.preloader</key>
                                            <value>${preloader-class}</value>
                                        </systemProperty>
                                    </systemProperties>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        
        <!-- Debug run profile -->
        <profile>
            <id>debug-run</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>3.1.0</version>
                        <executions>
                            <execution>
                                <id>debug-run</id>
                                <goals>
                                    <goal>java</goal>
                                </goals>
                                <configuration>
                                    <mainClass>${main-class}</mainClass>
                                    <classpathScope>compile</classpathScope>
                                    <options>
                                        <option>-Djava.awt.headless=false</option>
                                        <option>-Dprism.order=sw</option>
                                        <option>-Dprism.verbose=true</option>
                                        <option>-Dprism.forceGPU=false</option>
                                        <option>-Dorg.apache.commons.lang3.SystemUtils.JAVA_SPECIFICATION_VERSION=17</option>
                                        <option>-Djogamp.gluegen.UseTempJarCache=true</option>
                                        <option>-Djava.net.useSystemProxies=true</option>
                                        <option>-Xmx2g</option>
                                        <option>-XX:+UseG1GC</option>
                                        <option>-Xdebug</option>
                                        <option>-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005</option>
                                        <option>--add-opens=javafx.controls/javafx.scene.control.skin=ALL-UNNAMED</option>
                                        <option>--add-opens=javafx.controls/javafx.scene.control=ALL-UNNAMED</option>
                                        <option>--add-opens=javafx.graphics/javafx.scene=ALL-UNNAMED</option>
                                        <option>--add-opens=javafx.base/javafx.beans=ALL-UNNAMED</option>
                                    </options>
                                    <systemProperties>
                                        <systemProperty>
                                            <key>javafx.preloader</key>
                                            <value>${preloader-class}</value>
                                        </systemProperty>
                                    </systemProperties>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
